#!C:/Users/mxhensch/AppData/Local/Continuum/anaconda3/envs/arcgispro-py3 python
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Slope_Curv.py
# Created on: 2018-11-09 12:19:15.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: From SDM-EV-Tools. Modified for Forest Preserve tree modeling
# ---------------------------------------------------------------------------

#import modules
import os
import arcpy
from arcpy import env

#Directories
root = r'C:/Users/mxhensch/GIS_data/ForestModeling/'
ADK = os.path.join(root,"ADK/")
outDir = os.path.join(ADK, "FINAL/")
clip = os.path.join(ADK,"ADK_buffer.shp")
arcpy.env.extent = clip
outSamp = "in_memory/Outsamp"
WGS = arcpy.SpatialReference(os.path.join(ADK+"WGS_1984.prj"))

#set arc env values
arcpy.env.overwriteOutput = True
arcpy.env.nodata = "None"
arcpy.CheckOutExtension("Spatial")
arcpy.env.workspace = os.path.join(root,"ADK/DEM/")
arcpy.Delete_management("in_memory")



#get master raster 
SenMaster = os.path.join(outDir,"0730_B02.tif")
arcpy.env.outputCoordinateSystem = WGS
arcpy.env.snapRaster = SenMaster
resX = arcpy.GetRasterProperties_management(SenMaster, "CELLSIZEX")
resY = arcpy.GetRasterProperties_management(SenMaster, "CELLSIZEY")
if resX.getOutput(0) == resY.getOutput(0):
    res = resX.getOutput(0)
else: res = resX.getOutput(0) +" "+ resY.getOutput(0) 
arcpy.env.cellSize = os.path.join(outDir,"0730_B02.tif")

# Script arguments
Input_DEM = "ADK_DEM.tif"

# print("Registering DEM...")
# arcpy.RegisterRaster_management (in_raster = Input_DEM, register_mode = "REGISTER", reference_raster = SenMaster)

print("Resampling DEM...")
arcpy.Resample_management(in_raster = Input_DEM,out_raster = outSamp, cell_size = res, resampling_type = "BILINEAR")
Z_factor = "1"

#Output files
Output_slope_raster__degrees_ = os.path.join(outDir,"ADK_slope.tif")
Output_curvature_raster = os.path.join(outDir,"ADK_curv.tif")
Output_profile_curvature_raster = os.path.join(outDir,"ADK_profCurve.tif")
Output_plan_curvature_raster = os.path.join(outDir,"ADK_planCurv.tif")

# Local variables:
Output_slope_measure = "DEGREE"

#Process: Slope
print("Calculating slope...")
arcpy.gp.Slope_sa(outSamp, "in_memory/slope", Output_slope_measure, Z_factor)
arcpy.Clip_management(in_raster = "in_memory/slope", out_raster = outSamp, in_template_dataset = clip, maintain_clipping_extent = "NO_MAINTAIN_EXTENT", clipping_geometry = "ClippingGeometry")
arcpy.CopyRaster_management(outSamp, Output_slope_raster__degrees_)
arcpy.Delete_management("in_memory/slope", outSamp)

# Process: Curvature
print("Calculating curvature...")
arcpy.gp.Curvature_sa(outSamp, "in_memory/curv", Z_factor, "in_memory/profcurv", "in_memory/plancurv")

#Output clipped DEM derivatives
arcpy.Clip_management(in_raster = "in_memory/curv", out_raster = "in_memory/Ccurv", in_template_dataset = clip, maintain_clipping_extent = "NO_MAINTAIN_EXTENT", clipping_geometry = "ClippingGeometry")

print("Writing slope...")
arcpy.CopyRaster_management("in_memory/Ccurv", Output_curvature_raster)
arcpy.Delete_management("in_memory/curv","in_memory/Ccurv")

arcpy.Clip_management(in_raster = "in_memory/profcurv", out_raster = "in_memory/Prcurv", in_template_dataset = clip, maintain_clipping_extent = "NO_MAINTAIN_EXTENT", clipping_geometry = "ClippingGeometry")

print("Writing profile curvature...")
arcpy.CopyRaster_management("in_memory/Prcurv", Output_profile_curvature_raster)
arcpy.Delete_management("in_memory/profcurv","in_memory/Prcurv")

arcpy.Clip_management(in_raster = "in_memory/plancurv", out_raster = "in_memory/Plcurv", in_template_dataset = clip, maintain_clipping_extent = "NO_MAINTAIN_EXTENT", clipping_geometry = "ClippingGeometry")

print("Writing planar curvature...")
arcpy.CopyRaster_management("in_memory/Plcurv", Output_plan_curvature_raster)

arcpy.Delete_management("in_memory")